name: Java CI with Maven

on:
  push
# release:
#   types: [published]
#Workflows are not triggered for the created, edited, or deleted activity types for draft releases.
#When you create your release through the GitHub browser UI, your release may automatically be saved as a draft.

env:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--strict-checksums --threads 4C --batch-mode"

  NumberOfTest: 0
  TestResult: failed
  UnitTestResult: failed
  IntegrationTestResult: failed
  NumberOfUnitTest: 0
  NumberOfIntegrationTest: 0

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: '8'
          maven-version: '3.8.3'
      - name: Build with Maven
        run: mvn $MAVEN_CLI_OPTS $MAVEN_OPTS compile
      - name: Script-artifact
        uses: actions/upload-artifact@v3
        with:
          name: derivateResult.sh
          path: .github/derivateResult.sh
  Checkstyle:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: '8'
          maven-version: '3.8.3'
      - name: Checkstyle
        run: mvn -e $MAVEN_CLI_OPTS $MAVEN_OPTS org.apache.maven.plugins:maven-checkstyle-plugin:3.1.0:checkstyle
      - name: Checkstyle-artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: checkstyle-result.xml
          path: target/checkstyle-result.xml
  Spotbugs:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: '8'
          maven-version: '3.8.3'
      - name: Spotbugs
        run:  mvn $MAVEN_CLI_OPTS $MAVEN_OPTS compile com.github.spotbugs:spotbugs-maven-plugin:4.0.4:spotbugs
      - name: Spotbugs-artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: spotbugs-result.xml
          path: target/spotbugs-result.xml
  Tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: '17'
          maven-version: '3.8.3'
      - name: Unit Test
        run: mvn $MAVEN_CLI_OPTS $MAVEN_OPTS test -P unit-test
      - name: Integration Test
        run: mvn $MAVEN_CLI_OPTS $MAVEN_OPTS test -P integration-test
      - name: Create Unit Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Report
          path: target/surefire-reports/*unit*.txt
      - name: Create Integration Test Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Integration Test Report
          path: target/surefire-reports/*integration*.txt
  Package:
    runs-on: ubuntu-latest
    needs: Tests
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: '17'
          maven-version: '3.8.3'
      - name: Package
        run: mvn $MAVEN_CLI_OPTS $MAVEN_OPTS -D skipTests clean package
      - name: Create Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: UninaTestPipeline-1.0-SNAPSHOT.jar
          path: target/*.jar
  RetrieveTestResults:
    runs-on: ubuntu-latest
    needs: Tests
    env:
      UnitTestFailed: 0
      IntegrationTestFailed: 0
    outputs:
      test-result: ${{ steps.set_outputs.outputs.test-result }}
      number-of-test: ${{ steps.set_outputs.outputs.number-of-test }}
      unit-test-result: ${{ steps.set_outputs.outputs.unit-test-result }}
      integration-test-result: ${{ steps.set_outputs.outputs.integration-test-result }}
      number-of-unit-test: ${{ steps.set_outputs.outputs.number-of-unit-test }}
      number-of-integration-test: ${{ steps.set_outputs.outputs.number-of-integration-test }}
    steps:
      - name: Download Integration Test Report
        uses: actions/download-artifact@v3
        with:
          name: Integration Test Report
      - name: Download Unit Test Report
        uses: actions/download-artifact@v3
        with:
          name: Unit Test Report
      - name: Download Script derivateResult
        uses: actions/download-artifact@v3
        with:
          name: derivateResult.sh
      - name: Retrieve number of integration and unit test
        run: |
          echo "NumberOfIntegrationTest=$(grep -o -w "Tests run: [0-9]*" *integration*.txt | cut -d' ' -f 3)" >> $GITHUB_ENV
          echo "NumberOfUnitTest=$(grep -o -w "Tests run: [0-9]*" *unit*.txt | cut -d' ' -f 3)" >> $GITHUB_ENV
          echo "UnitTestFailed=$(grep -o -w "Failures: [0-9]*" *unit*.txt | cut -d' ' -f 2)" >> $GITHUB_ENV
          echo "IntegrationTestFailed=$(grep -o -w "Failures: [0-9]*" *integration*.txt | cut -d' ' -f 2)" >> $GITHUB_ENV
      - name: Calculate Total Number Of Tests
        run: |
          echo "NumberOfTest=$(($NumberOfIntegrationTest + $NumberOfUnitTest))" >> $GITHUB_ENV
      - name: Retrieve Tests result
        run: |
           echo "UnitTestResult=$(bash derivateResult.sh $UnitTestFailed)" >> $GITHUB_ENV
           echo "IntegrationTestResult=$(bash derivateResult.sh $IntegrationTestFailed)" >> $GITHUB_ENV
           echo "TestResult=$(bash derivateResult.sh $UnitTestFailed $IntegrationTestFailed)" >> $GITHUB_ENV
      - name: Set Output Values
        id: set_outputs
        run: |
          echo "::set-output name=test-result::$TestResult"
          echo "::set-output name=number-of-test::$NumberOfTest"
          echo "::set-output name=unit-test-result::$UnitTestResult"
          echo "::set-output name=integration-test-result::$IntegrationTestResult"
          echo "::set-output name=number-of-unit-test::$NumberOfUnitTest"
          echo "::set-output name=number-of-integration-test::$NumberOfIntegrationTest"

  CreateBadges:
     runs-on: ubuntu-latest
     needs: RetrieveTestResults
     steps:
      - name: Configure Job Eviroment
        run: |
          mkdir -p badges
          echo "TestResult=${{ needs.RetrieveTestResults.outputs.test-result }}" >> $GITHUB_ENV
          echo "NumberOfTest=${{ needs.RetrieveTestResults.outputs.number-of-test }}" >> $GITHUB_ENV
          echo "UnitTestResult=${{ needs.RetrieveTestResults.outputs.unit-test-result }}" >> $GITHUB_ENV
          echo "IntegrationTestResult=${{ needs.RetrieveTestResults.outputs.integration-test-result }}" >> $GITHUB_ENV
          echo "NumberOfUnitTest=${{ needs.RetrieveTestResults.outputs.number-of-unit-test }}" >> $GITHUB_ENV
          echo "NumberOfIntegrationTest=${{ needs.RetrieveTestResults.outputs.number-of-integration-test }}" >> $GITHUB_ENV
      - name: CreateBadge Test Result
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Test Result
          status: ${{ env.TestResult }}
          color: ${{ env.TestResult == 'Failed' && 'red' || env.TestResult == 'Passed' && 'green' }}
          path: badges/test_result.svg
      - name: CreateBadge Test Number
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Number Of Test
          status: ${{ env.NumberOfTest }}
          color: blue
          path: badges/test_number.svg
      - name: CreateBadge Unit Test Result
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Unit Test Result
          status: ${{ env.UnitTestResult }}
          color: ${{ env.UnitTestResult == 'Failed' && 'red' || env.UnitTestResult == 'Passed' && 'green' }}
          path: badges/unit_test_result.svg
      - name: CreateBadge Integration Test Result
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Integration Test Result
          status: ${{ env.IntegrationTestResult }}
          color: ${{ env.IntegrationTestResult == 'Failed' && 'red' || env.IntegrationTestResult == 'Passed' && 'green' }}
          path: badges/integration_test_result.svg
      - name: CreateBadge Integration Test Number
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Integration Test Number
          status: ${{ env.NumberOfIntegrationTest }}
          color: blue
          path: badges/integration_test_number.svg
      - name: CreateBadge Unit Test Number
        uses: emibcn/badge-action@v1.2.1
        with:
          label: Unit Test Number
          status: ${{ env.NumberOfUnitTest }}
          color: blue
          path: badges/unit_test_number.svg
      - name: Create Badge Folder Artifact
        uses: actions/upload-artifact@v3
        with:
          name: badges
          path: badges/
  CommitBadges:
    runs-on: ubuntu-latest
    needs: CreateBadges
    steps:
      - uses: actions/checkout@v3
      - name: Remove old Badges
        uses: JesseTG/rm@v1.0.2
        with:
          path: badges
      - name: Upload Badge Artifact
        uses: actions/download-artifact@v3
        with:
          name: badges
      - name: Commit Badges
        run: |
          mkdir -p badges
          mv *.svg badges
          git config --global user.email "interluca@outlook.it"
          git config --global user.name "AsdInside"
          git add badges
          git commit -m "Add/Update badge"
      - name: Push badge commit
        uses: ad-m/github-push-action@master
        if: ${{ success() }}
        with:
          github_token: ${{ secrets.AUTH_T }}


